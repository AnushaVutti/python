- functionalties in the project:
    - add a contact
    - remove a contact
    - edit a contact
    - get the list of all contacts
    - get list of contact sorted by different criteria
    - get list of contacts based on certain filter (first name, country etc.)
    - searching a contact

- contact object details:
    - first name
    - last name
    - country code
    - phone number
    - email address
    - facebook id (optional)
    - twitter id  (optional)
    - website
    - physical address (another object with house num, address line 1, address line 2 etc, country, zip)

    - methods
        - constructor

validations
    - Contact class
        - first name and last name
            # should contain only alphabets (converted to camel case)
            # first name should be of minimum length 5 
            # last name is optional
        - country code
            # length 3-4
            # contain only numbers and symbol '+'
        - phone number
            # should be exactly of length 10
            # contain only digits
            # not start with digit less than 6
        - email address
            # contain only letter, digits, '@' and '.'
            # minimum length 10
            # end with .com
            # not start with number
        - facebook_id
            # start with facebook.com
        - twitter id
            # start with twitter.com
        - website
            # start with www and end with (in, com, gov etc.)
             
    - Address class (To be written by Anusha)
        -

- create separate method for each functionalty
- make classes for each entity
- try importing some code file in another file
- use list, dict, set and other data structures
- perform some string operations
- some file handling
- exception handling (validations for name format)
- lambda functions
- streams
- sql connections (crud operations)

<------------------------- for later ------------------------->
-- add profile pic to contact object (will use file handling)
-- add google map location
-- convert the code to api
-- develop UI for the whole thing
-- try recieving data from api and consume it (maybe with spark streaming)
-- multithreading